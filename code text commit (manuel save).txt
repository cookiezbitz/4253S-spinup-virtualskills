#region VEXcode Generated Robot Configuration
import math
import random
from vexcode_vrc import *
from vexcode_vrc.events import get_Task_func
  
# constructors

drivetrain = Drivetrain()
brain = Brain()
bottom_distance = Distance("BottomDistance", 18)
roller_optical = Optical("RollerOptical", 2)
gps = GPS("GPS", 3)
intake_motor_group = Motor("IntakeMotorGroup", 10)
bottom_line_tracker = LineTracker("BottomLineTracker", 22)
middle_line_tracker = LineTracker("MiddleLineTracker", 23)
top_line_tracker = LineTracker("TopLineTracker", 24)
#endregion VEXcode Generated Robot Configuration

# --------------------------------------------------
# 
# 	Project:            4253S Virtual Skills
#	Author:             Remiel
#	Created:            
#	Description:        Made for the Vex VR challenge in the 2022-2023 Spin up season
#   Starting Position:  Position C 
#   Preload:            2 Preloads
# 
# --------------------------------------------------



#ALL DISTENCE UNITS IN MILLIMETERS; ALL ANGLE UNITS IN DEGREES

# Library imports
from vexcode_vrc import *



#function to turn roller
#uses the optical sensor and while loop conditionals
def turnroller():
    intake_motor_group.set_velocity(80,PERCENT)
    intake_motor_group.spin(REVERSE)
    while not roller_optical.color() == RED.value:
        wait(1, MSEC)
    #detects weather or not the roller is red
    while not roller_optical.color() == BLUE.value:
        wait(1, MSEC)
    #detects weather or not the roller is blue
    intake_motor_group.stop()
    #if the optical sensor detects that the roller has been turned to the red side, the intake stops
    



#variables used in the shoot disc function
discstoshoot = 0
#this variable is assigned every time the function is called, it tells the function how many discs it needs to shoot

#function to fire the disc
#uses the line sensor, while loops, and for loop conditionals
def shootdisc(discstoshoot):
    intake_motor_group.spin(REVERSE)
    for x in range(discstoshoot):
    #for loop repeats this sequence depending on the numerical value assigned in the "discstoshoot" variable
        while not top_line_tracker.reflectivity(PERCENT) > 80:
            wait(5, MSEC)
        #This conditional detects weather or not the disc is at the top of the intake using the line tracker sensor
        #If it is, then the program moves on to the next line
        while not top_line_tracker.reflectivity(PERCENT) < 20:
            wait(5, MSEC)
        #This conditional allows for the disc to fire: the intake will spin until the sensor is no longer detecting the disc
        #after the sensor detects that the disc is no longer there,
        #it will acknowldge that it has shot 1/discstoshoot and will repeat until it has shot all of the discs



#function to position the robot in front of a disc
# uses the optical sensor and while loop conditionals
def movetodisc():
    drivetrain.drive(FORWARD)
    #robot moves forward until it has reached a disc
    while not bottom_distance.object_distance(MM) < 20:
        #checks if the disc is within 20 millimeters of the robot
        wait(5, MSEC)
    drivetrain.stop()
    #if the while loop condition is fufilled, the drivetrain stops driving.




#variables used in the intake disc function
stack = True
#the variable is assigned by the user, it tells the function whether or not the discs it is intaking is in a stack or not
#True denotes, yes, it is in a stack, while False means no stack
discstointake = 0
#This variable is also assigned by the user. It tells the function the amount of discs it needs to intake

#function to intake discs
#uses line and distence sensors, also uses while and for loop conditionals
def intakedisc(discstointake, stack):
    if stack == True:
    #checks if the discs are in a stack
        while bottom_distance.object_distance(MM) < 40:
        #checks if the discs are within 40 millimeters of the intake
            intake_motor_group.spin(REVERSE)
            #turns the roller in the Intake direction
            wait(5, MSEC)
        while not top_line_tracker.reflectivity(PERCENT)>80:
        #checks if the disc is at the top of the intake
            wait(5,MSEC)
        intake_motor_group.stop()
        #if the disc is at the top of the intake, the process is complete and 
    else:
    #this part runs if the disc is not a stack
        for x in range(discstointake):
        #the loop repeats for every disc that needs to be intaked
            movetodisc()
            #the robot moves to the disc
            while bottom_distance.object_distance(MM) < 40:
            #if the robot is less than 40 millimeters away from the disc, it is able to intake it
                intake_motor_group.spin(REVERSE)
                #the robot intakes that disc and the for loop repeats for every disc needed
                wait(5, MSEC)




#declaring the variables to be used in the drive to coordinate function
endposx = 0
endposy = 0
#end posy and x denote the coordinate that the function tells the robot to move to
#variables assigned by user

beginposx = 0
beginposy = 0
beginheading = 0
#These starting conditions collect info from the GPS sensor
#has the beginning coordinate position and orientation

turnangle = 0
turnheading = 0
travelDistance = 0
#These values are all CALCULATED by the function using trigonometric equations

Otherturn = False
#this boolean is assigned by the user to change how the robot can move in this function

#allows the robot to drive to anywhere on the field, given the desired end coordinate
def drivetocord(endposx,endposy, Otherturn):
#drive to coordinate function collects the desired endpoint and whether or not otherturn will be used

    beginposx = gps.x_position(MM)
    beginposy = gps.y_position(MM)
    beginheading = drivetrain.heading(DEGREES)
    #gets the values of the the robot's starting conditions when the function is called
    #this includes the GPS x and y positions of the robot and the robot heading as read in the inertial sensor

    travelDistance = math.sqrt((endposx-(beginposx))**2 + (endposy-(beginposy))**2)
    #calculates for travel distance using the pythagorean theorem

    turnangle = (math.degrees(math.atan2((endposy-beginposy), (endposx - beginposx))))
    #calculates the tangent using trigonometric functions
    #the tangent is the angle that the robot needs to turn to face the end position coordinate
    
    if Otherturn == False:
        turnheading = beginheading - turnangle
        #if the  otherturn boolean is not needed, then the turn headding is calculated normally
    else:
        turnheading = 360 -( beginheading - turnangle +35 )
        #if the otherturn boolean is needed, then it will make adjustments to the robot's turn so it remains accurate

    #To find out if otherturn is needed, it should be tested in the program
    
    #Headings go from 0-360
    #these corrections make if the turnheading goes over or under the range
    if turnheading > 360:
        turnheading = turnheading -360    
    if turnheading < 0:
        turnheading = turnheading + 360

    #The robot turns to the calculated heading using the inertial sensor
    drivetrain.turn_to_heading(turnheading,DEGREES)
    #the robot travels the calculated distence
    drivetrain.drive_for(FORWARD,travelDistance,MM)


# Add project code in "main"
def main():

    intake_motor_group.set_velocity(100,PERCENT)
    drivetrain.set_drive_velocity(100,PERCENT)
    drivetrain.set_turn_velocity(100,PERCENT)
    drivetrain.set_heading(270,DEGREES)
    #Setup code to get the robot moving as fast as possible

    #   FRONT of the bot is the intake
    #   BACK of the bot is the shooter

    #AUTONOMOUS BEGIN
    drivetrain.drive_for(REVERSE,40,MM)
    drivetrain.turn_to_heading(168,DEGREES)
    drivetrain.drive_for(FORWARD,110,MM)
    #Robot positions itself so it's intake faces the match loader and the shooter faces the high goal
    #this allows for the robot to intake and shoot at the same time
    shootdisc(9)
    #the robot shoots 9 discs, including the 2 preloads and 7 match loads
    drivetrain.drive_for(FORWARD,190,MM)
    #robot repositions itself so it can intake a stack of 3 discs


    #Spinning the intake in REVERSE allows for the discs to be brought IN to the robot and for the disc to be shot out,
    #while spinning the intake in FORWARD brings the discs OUT 

    drivetrain.turn_to_heading(240,DEGREES)
    drivetrain.drive_for(FORWARD,500,MM)
    intakedisc(3,True)
    #intakedisc() collects the parameters of how many discs you would like to intake, and weather or not the discs are a stack.
    drivetrain.turn_to_heading(192,DEGREES)
    #the robot's shooter turns to face towards the high goal.
    #it is necesary to include specific degrees like 192 to ensure that the discs being shot here do not interfere (knock out) the discs that have been previously shot
    #192 degrees is angled in a way where it will not knock out other discs
    shootdisc(3)
    #shoots 3 stack

    #the robot prepares to intake two discs
    drivetrain.turn_to_heading(270,DEGREES)
    drivetrain.drive_for(FORWARD,640,MM)
    wait(.1,SECONDS)
    #the robot drives into range for intaking the disc
    #since the intake is already spinning, it waits .1 of a second for the disc to be held by the robot
    intake_motor_group.set_velocity(86,PERCENT)
    #the velocity is set lower so the disc does not get shot out early and miss the goal
    drivetrain.turn_to_heading(145,DEGREES)
    #drivetrain turns to intake another disc
    drivetrain.drive_for(FORWARD,210,MM)
    #drivetrain drives into disc, no extra wait time is needed

    intake_motor_group.set_velocity(96,PERCENT)
    #velocity goes as high as accurately possible

    drivetrain.turn_to_heading(205,DEGREES,wait=False)
    #the drivetrain turns so shooter faces the goal
    #the boolean at the end of the function tells the next line to move on before the drivetrain has finished turning
    shootdisc(2)
    #shoots all two discs

   
    intake_motor_group.set_velocity(96,PERCENT)
    #reset the intake motor velocity to 100
    drivetrain.turn_to_heading(145,DEGREES)
    #turns towards the three stack
    drivetrain.drive_for(FORWARD,390,MM)
    intakedisc(3,True)
    #drives to and intakes 3 stack

    drivetrain.turn_to_heading(195,DEGREES)
    #drivetrain turns towards high goal
    shootdisc(3)
    #fires 3 stack 

    drivetrain.turn_to_heading(135,DEGREES)
    #turns to intake two discs
    intake_motor_group.set_velocity(86,PERCENT)
    drivetrain.drive_for(FORWARD,900,MM)
    #drives into the first disc, which it intakes while the robot moves
    wait(.1,SECONDS)
    #waits .1 seconds for the second disc to be held by the robot
    drivetrain.turn_to_heading(178,DEGREES)
    #the robot's shooter turns to face the blue high goal
    intake_motor_group.set_velocity(100,PERCENT)
    shootdisc(2)
    #fires two discs


    intake_motor_group.stop()
    #intake stops to not interfere with the roller turning functions

    #positions bot in front of the roller
    drivetrain.drive_for(REVERSE,200,MM)
    drivetrain.turn_to_heading(270,DEGREES)
    #turns so that the robot's rolling mech is facing the roller
    drivetrain.drive_for(REVERSE,110,MM)
    turnroller()
    #uses the optical sensor to detect how much the roller needs to be turned, and turns the roller accordingly


    #Robot moves to the second roller
    drivetrain.drive_for(FORWARD,500,MM)
    drivetrain.turn_to_heading(0,DEGREES)
    #turns so that the robot's rolling mech is facing the roller
    drivetrain.drive_for(REVERSE,297,MM)
    turnroller()
    #robot uses the optical sensor again to turn the roller

    #resets the drivetrain heading to mitigate potential future errors
    drivetrain.set_heading(0,DEGREES)


    drivetrain.turn_to_heading(308,DEGREES)
    #alligns the intake with the first disc

    intake_motor_group.set_velocity(45,PERCENT)
    intake_motor_group.spin(REVERSE)
    #activates the intake for the three discs

    drivetrain.drive_for(FORWARD,750,MM)
    #drives into the first of the three discs, intakes it
    drivetrain.turn_to_heading(315,DEGREES)
    #realigns the drivetrain for the next to discs

    drivetrain.drive_for(FORWARD,885,MM)
    #drives to the third of the three discs. picks up the second disc along the way
    wait(.15,SECONDS)
    #wait gives the robot time to intake the discs
    


    drivetrain.turn_to_heading(45,DEGREES)
    intake_motor_group.set_velocity(100,PERCENT)
    #aims the shooter at the RED HIGH GOAL
    shootdisc(3)
    #fires the three discs

    #manuevers the robot behind three discs for intaking
    intake_motor_group.set_velocity(45,PERCENT)
    drivetrain.turn_to_heading(180,DEGREES)
    drivetrain.drive_for(FORWARD,800,MM)
    drivetrain.turn_to_heading(225,DEGREES)


    #The following is a sequence that is uniquely used when collecting discs near barriers
    #In this sequence, the robot staggers its movement by having short pauses inbetween to intake the discs

    drivetrain.drive_for(FORWARD,300,MM)
    wait(.1,SECONDS)
    drivetrain.turn_to_heading(0,DEGREES)
    drivetrain.drive_for(FORWARD,150,MM)
    wait(.1,SECONDS)
    drivetrain.drive_for(FORWARD,150,MM)
    wait(.2,SECONDS)
    drivetrain.drive_for(FORWARD,260,MM)
    wait(.4,SECONDS)

    
    
    drivetrain.turn_to_heading(55,DEGREES)
    #after collecting the discs, the robot aims towards the RED GOAL
    intake_motor_group.set_velocity(100,PERCENT)
    shootdisc(3)
    #the bot fires all three discs into the goal


    #The bot the  repositions itself to intake three more barrier goals
    drivetrain.turn_to_heading(0,DEGREES)
    drivetrain.drive_for(FORWARD,400,MM)
    drivetrain.turn_to_heading(270,DEGREES)

    #the bot intakes the discs by driving over the barrier goals
    #once again, it uses a staggering driving sequence as before
    intake_motor_group.set_velocity(40,PERCENT)
    drivetrain.drive_for(FORWARD,200,MM)
    wait(.1,SECONDS)
    drivetrain.drive_for(FORWARD,130,MM)
    wait(.2,SECONDS)
    drivetrain.drive_for(FORWARD,220,MM)
    wait(.5,SECONDS)

    #turns towards the RED HIGH GOAL to shoot the disc
    drivetrain.turn_to_heading(24,DEGREES)
    intake_motor_group.set_velocity(100,PERCENT)
    shootdisc(3)
    #shoots the three discs
    
    #The robot drives to this coordinate as a sort of "Position resetting point"
    #this is to correct the positional errors that might have arisen from driving over barriers
    drivetrain.drive_for(FORWARD,100,MM)
    drivetocord(1500,220, True)
    #the coordinates the robot drives to puts it in position to intake from the match loader
    #the robot can also shoot into the red high goal from this position

    intake_motor_group.set_velocity(100,PERCENT)
    drivetrain.turn_to_heading(347,DEGREES)
    #the robot turns to aim at the shooter

    shootdisc(7)
    #shoots 7 match loads
    
    drivetrain.turn_to_heading(45,DEGREES)
    drivetrain.drive_for(FORWARD,550,MM)
    #robot turns and drives to a stack of 3 discs
    intake_motor_group.set_velocity(55,PERCENT)
    intakedisc(3,True)
    #intakes the stack of 3

    #prepares to shoot the stack of 3 discs
    drivetrain.turn_to_heading(12,DEGREES)
    #Robot turns to aim it's shooter at the red high goal
    intake_motor_group.set_velocity(100,PERCENT)
    drivetrain.drive_for(FORWARD,100,MM,wait=False)
    shootdisc(3)
    #robot fires three discs
    wait(.45,SECONDS)
    #allows the robot to have time to recalibrate before moving on

    #turns to the disc at the top of the autonomous line and turns to have the intake face it
    drivetrain.turn_to_heading(90,DEGREES)
    intake_motor_group.set_velocity(50,PERCENT)
    drivetrain.drive_for(FORWARD,750,MM)
    #drives over to the disc
    drivetrain.turn_to_heading(315,DEGREES)
    #the disc is intaked while it turns to face another colinear disc on the autonomous line

    drivetrain.drive_for(FORWARD,350,MM)
    drivetrain.turn_to_heading(23,DEGREES)
    #The robot drives to and intakes the second disc as it turns

    intake_motor_group.set_velocity(96,PERCENT)
    shootdisc(2)
    #with all the discs intaked, the robot shoots two discs into the red high goal

    intake_motor_group.set_velocity(100,PERCENT)
    drivetrain.turn_to_heading(315,DEGREES)
    drivetrain.drive_for(FORWARD,350,MM)
    #the robot positions it's intake in front of the 3 stack of discs
    intakedisc(3,True)
    #the robot shoots the disc then prepares to fire by aiming it's shooter at the red high goal
    drivetrain.turn_to_heading(13,DEGREES)
    intake_motor_group.set_velocity(94,PERCENT)
    shootdisc(3)
    #The robot shoots all three discs

    #The robot turns to face the last two discs on the autonomous line
    drivetrain.turn_to_heading(315,DEGREES)
    intake_motor_group.set_velocity(50,PERCENT)
    drivetrain.drive_for(FORWARD,850,MM)
    wait(.1,SECONDS)
    #the robot intakes the two discs, collecting one while it drives 

    drivetrain.turn_to_heading(359,DEGREES)
    #robot aims it's shooter towards the red goal
    intake_motor_group.set_velocity(96,PERCENT)
    drivetrain.drive_for(REVERSE,150,MM,wait=False)
    shootdisc(2)
    #robot fires the two discs into the red goal, the robot also moves to line itself up with the roller at the same time'


    drivetrain.turn_to_heading(90,DEGREES)
    #robot turns so it's roller mech is facing the other roller
    drivetrain.drive_for(REVERSE,100,MM)
    turnroller()
    #the robot turns the roller to RED

    #repositions to prepare to turn the other roller
    drivetrain.drive_for(FORWARD,500,MM)
    drivetrain.turn_to_heading(180,DEGREES)
    drivetrain.drive_for(REVERSE,265,MM)
    turnroller()
   #turns the roller to RED once it is in range 

    #Prepares to intake the line of three discs
    intake_motor_group.set_velocity(40,PERCENT)
    intake_motor_group.spin(REVERSE)

    drivetrain.turn_to_heading(130,DEGREES)
    #turns so that the intake is facing towards the first of three discs
    drivetrain.drive_for(FORWARD,700,MM)
    wait(.1,SECONDS)
    #Drives to the first disc and intakes it
    drivetrain.turn_to_heading(135,DEGREES)
    #turns to the other two discs in the line
    drivetrain.drive_for(FORWARD,870,MM)
    wait(.3,SECONDS)
    drivetrain.drive_for(FORWARD,500,MM)
    #intakes the 2nd and third disc as it moves down the line
    drivetrain.turn_to_heading(215,DEGREES)
    #turns to face the BLUE GOAL
    intake_motor_group.set_velocity(96,PERCENT)
    shootdisc(3)
    #Fires the three discs into the blue goal
    #drivetrain.drive_for(FORWARD,400,MM)


    

    
# VR threads — Do not delete
vr_thread(main)
