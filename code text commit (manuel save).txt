#region VEXcode Generated Robot Configuration
import math
import random
from vexcode_vrc import *
from vexcode_vrc.events import get_Task_func
  
# constructors

drivetrain = Drivetrain()
brain = Brain()
bottom_distance = Distance("BottomDistance", 18)
roller_optical = Optical("RollerOptical", 2)
gps = GPS("GPS", 3)
intake_motor_group = Motor("IntakeMotorGroup", 10)
bottom_line_tracker = LineTracker("BottomLineTracker", 22)
middle_line_tracker = LineTracker("MiddleLineTracker", 23)
top_line_tracker = LineTracker("TopLineTracker", 24)
#endregion VEXcode Generated Robot Configuration

# --------------------------------------------------
# 
# 	Project:            VEXcode Project
#	Author:             VEX
#	Created:            
#	Description:        VEXcode V5 Python Project
#   Starting Position:  
#   Preload:            
# 
# --------------------------------------------------

# Library imports
from vexcode_vrc import *

endposx = 0
endposy = 0

beginposx = 0
beginposy = 0
beginheading = 0


turnangle = 0
turnheading = 0
travelDistance = 0

Otherturn = False

#allows the robot to drive to anywhere on the field, given the desired end coordinate
def drivetocord(endposx,endposy, Otherturn):

    #gets the values of the the robot's starting conditions when the function is called
    #this includes the GPS x and y positions of the robot and the robot heading as read in the inertial sensor
    beginposx = gps.x_position(MM)
    beginposy = gps.y_position(MM)
    beginheading = drivetrain.heading(DEGREES)


    travelDistance = math.sqrt((endposx-(beginposx))**2 + (endposy-(beginposy))**2)

    turnangle = (math.degrees(math.atan2((endposy-beginposy), (endposx - beginposx))))
    
    if Otherturn == False:
        turnheading = beginheading - turnangle
    else:
        turnheading = beginheading - turnangle -90
    
    
    if turnheading > 360:
        turnheading = turnheading -360
        
    if turnheading < 0:
        turnheading = turnheading + 360
    
    drivetrain.turn_to_heading(turnheading,DEGREES)
    drivetrain.drive_for(FORWARD,travelDistance,MM)





# Add project code in "main"
def main():
    drivetrain.set_heading(0,DEGREES)
    drivetrain.set_drive_velocity(100,PERCENT)
    drivetocord(0,0,False)
    drivetocord(-400,-400,False)
    drivetocord(0,0,True)

    """
    drivetocord(0,1600,False)
    drivetocord(-500,0,True)
    drivetocord(300,1000,True)
    """
# VR threads â€” Do not delete
vr_thread(main)
