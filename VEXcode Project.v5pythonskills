{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vrc import *\nfrom vexcode_vrc.events import get_Task_func\n  \n# constructors\n\ndrivetrain = Drivetrain()\nbrain = Brain()\nbottom_distance = Distance(\"BottomDistance\", 18)\nroller_optical = Optical(\"RollerOptical\", 2)\ngps = GPS(\"GPS\", 3)\nintake_motor_group = Motor(\"IntakeMotorGroup\", 10)\nbottom_line_tracker = LineTracker(\"BottomLineTracker\", 22)\nmiddle_line_tracker = LineTracker(\"MiddleLineTracker\", 23)\ntop_line_tracker = LineTracker(\"TopLineTracker\", 24)\n#endregion VEXcode Generated Robot Configuration\n\n# --------------------------------------------------\n# \n# \tProject:            VEXcode Project\n#\tAuthor:             VEX\n#\tCreated:            \n#\tDescription:        VEXcode V5 Python Project\n#   Starting Position:  \n#   Preload:            \n# \n# --------------------------------------------------\n\n#show all the sensors I used and explain what they do HERE\n#SPELL OUT THE RUBRIC\n#Sensors: top line tracker used to detect when \n\n\n#add a turn AND drive function to make my code more concise and understandable\n#ALL DISTENCE UNITS IN MILLIMETERS; ALL ANGLE UNITS IN DEGREES\n\n# Library imports\nfrom vexcode_vrc import *\n\n#function to turn roller\ndef turnroller():\n    intake_motor_group.set_velocity(80,PERCENT)\n    intake_motor_group.spin(REVERSE)\n    while not roller_optical.color() == RED.value:\n        wait(1, MSEC)\n    while not roller_optical.color() == BLUE.value:\n        wait(1, MSEC)\n    intake_motor_group.stop()\n\n#variables to fire the discs with\ndiscstoshoot = 0\ndiscsshot = 0\n\n#function to fire the disc\ndef shootdisc(discstoshoot):\n    intake_motor_group.spin(REVERSE)\n    for x in range(discstoshoot):\n        while not top_line_tracker.reflectivity(PERCENT) > 80:\n            wait(5, MSEC)\n          \n        while not top_line_tracker.reflectivity(PERCENT) < 20:\n            wait(5, MSEC)\n    discstoshoot = 0\n\n\n\n\ndef codesetup():\n    intake_motor_group.set_velocity(100,PERCENT)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    drivetrain.set_turn_velocity(100,PERCENT)\n    drivetrain.set_heading(270,DEGREES)\n\n\n\n#function to position the robot to intake the disc\ndef movetodisc():\n    drivetrain.drive(FORWARD)\n    while not bottom_distance.object_distance(MM) < 20:\n        wait(5, MSEC)\n    drivetrain.stop()\n\n\n#to be used as a zig zagger to get discs near low goal barrier\n\nstack = True\ndiscstointake = 0\n\ndef intakedisc(discstointake, stack):\n    if stack == True:\n        while bottom_distance.object_distance(MM) < 40:\n            intake_motor_group.spin(REVERSE)\n            wait(5, MSEC)\n        while not top_line_tracker.reflectivity(PERCENT)>80:\n            wait(5,MSEC)\n        intake_motor_group.stop()\n    else:\n        for x in range(discstointake):\n            movetodisc()\n            while bottom_distance.object_distance(MM) < 40:\n                intake_motor_group.spin(REVERSE)\n                wait(5, MSEC)\n\n\n\n\n#declaring the variables to be used in the drive to coordinate function\nendposx = 0\nendposy = 0\n\n#beginposx = 0\n#beginposy = 0\n#beginheading = 0\n\n\n#turnangle = 0\n#turnheading = 0\n#travelDistance = 0\n\nOtherturn = False\n\n#allows the robot to drive to anywhere on the field, given the desired end coordinate\ndef drivetocord(endposx,endposy, Otherturn):\n\n    #gets the values of the the robot's starting conditions when the function is called\n    #this includes the GPS x and y positions of the robot and the robot heading as read in the inertial sensor\n    beginposx = gps.x_position(MM)\n    beginposy = gps.y_position(MM)\n    beginheading = drivetrain.heading(DEGREES)\n\n\n    travelDistance = math.sqrt((endposx-(beginposx))**2 + (endposy-(beginposy))**2)\n\n    turnangle = (math.degrees(math.atan2((endposy-beginposy), (endposx - beginposx))))\n    \n    if Otherturn == False:\n        turnheading = beginheading - turnangle\n    else:\n        turnheading = 360 -( beginheading - turnangle +35 )\n    \n    \n    if turnheading > 360:\n        turnheading = turnheading -360\n        \n    if turnheading < 0:\n        turnheading = turnheading + 360\n\n    \"\"\"\n    brain.screen.print(turnangle)\n    brain.screen.next_row()\n    brain.screen.print(turnheading)\n    brain.screen.next_row()\n    brain.screen.print(beginposx)\n    brain.screen.next_row()\n    brain.screen.print(beginposy)\n    \"\"\"\n    \n    drivetrain.turn_to_heading(turnheading,DEGREES)\n    drivetrain.drive_for(FORWARD,travelDistance,MM)\n\n\n\n# Add project code in \"main\"\ndef main():\n\n\n    codesetup()\n\n    #SETUP CODE, GETS THE ROBOT TO BE AS FAST AS POSSIBLE\n\n\n    #   FRONT of the bot is the intake\n    #   BACK of the bot is the shooter\n\n\n\n\n\n    #AUTONOMOUS BEGIN\n    drivetrain.drive_for(REVERSE,40,MM)\n    drivetrain.turn_to_heading(168,DEGREES)\n    drivetrain.drive_for(FORWARD,110,MM)\n    #Robot positions itself so it's intake faces the match loader and the shooter faces the high goal\n    #this allows for the robot to intake and shoot at the same time\n    shootdisc(2)\n    #the robot shoots 9 discs, including the 2 preloads and 7 match loads\n    drivetrain.drive_for(FORWARD,190,MM)\n    #robot repositions itself so it can intake a stack of 3 discs\n\n\n    #Spinning the intake in REVERSE allows for the discs to be brought IN to the robot and for the disc to be shot out,\n    #while spinning the intake in FORWARD brings the discs OUT \n\n    drivetrain.turn_to_heading(240,DEGREES)\n    drivetrain.drive_for(FORWARD,500,MM)\n    intakedisc(3,True)\n    #intakedisc() collects the parameters of how many discs you would like to intake, and weather or not the discs are a stack.\n    drivetrain.turn_to_heading(192,DEGREES)\n    #the robot's shooter turns to face towards the high goal.\n    #it is necesary to include specific degrees like 192 to ensure that the discs being shot here do not interfere (knock out) the discs that have been previously shot\n    #192 degrees is angled in a way where it will not knock out other discs\n    shootdisc(3)\n    #shoots 3 stack\n\n    #the robot prepares to intake two discs\n    drivetrain.turn_to_heading(270,DEGREES)\n    drivetrain.drive_for(FORWARD,640,MM)\n    wait(.1,SECONDS)\n    #the robot drives into range for intaking the disc\n    #since the intake is already spinning, it waits .1 of a second for the disc to be held by the robot\n    intake_motor_group.set_velocity(86,PERCENT)\n    #the velocity is set lower so the disc does not get shot out early and miss the goal\n    drivetrain.turn_to_heading(145,DEGREES)\n    #drivetrain turns to intake another disc\n    drivetrain.drive_for(FORWARD,210,MM)\n    #drivetrain drives into disc, no extra wait time is needed\n\n    intake_motor_group.set_velocity(96,PERCENT)\n    #velocity goes as high as accurately possible\n\n    drivetrain.turn_to_heading(205,DEGREES,wait=False)\n    #the drivetrain turns so shooter faces the goal\n    #the boolean at the end of the function tells the next line to move on before the drivetrain has finished turning\n    shootdisc(2)\n    #shoots all two discs\n\n   \n    intake_motor_group.set_velocity(96,PERCENT)\n    #reset the intake motor velocity to 100\n    drivetrain.turn_to_heading(145,DEGREES)\n    #turns towards the three stack\n    drivetrain.drive_for(FORWARD,390,MM)\n    intakedisc(3,True)\n    #drives to and intakes 3 stack\n\n    drivetrain.turn_to_heading(195,DEGREES)\n    #drivetrain turns towards high goal\n    shootdisc(3)\n    #fires 3 stack \n\n    drivetrain.turn_to_heading(135,DEGREES)\n    #turns to intake two discs\n    intake_motor_group.set_velocity(86,PERCENT)\n    drivetrain.drive_for(FORWARD,900,MM)\n    #drives into the first disc, which it intakes while the robot moves\n    wait(.1,SECONDS)\n    #waits .1 seconds for the second disc to be held by the robot\n    drivetrain.turn_to_heading(178,DEGREES)\n    #the robot's shooter turns to face the blue high goal\n    intake_motor_group.set_velocity(100,PERCENT)\n    shootdisc(2)\n    #fires two discs\n\n\n    intake_motor_group.stop()\n    #intake stops to not interfere with the roller turning functions\n\n    #positions bot in front of the roller\n    drivetrain.drive_for(REVERSE,200,MM)\n    drivetrain.turn_to_heading(270,DEGREES)\n    #turns so that the robot's rolling mech is facing the roller\n    drivetrain.drive_for(REVERSE,110,MM)\n\n\n    turnroller()\n    #uses the optical sensor to detect how much the roller needs to be turned, and turns the roller accordingly\n\n\n    #Robot moves to the second roller\n    drivetrain.drive_for(FORWARD,500,MM)\n    drivetrain.turn_to_heading(0,DEGREES)\n    #turns so that the robot's rolling mech is facing the roller\n    drivetrain.drive_for(REVERSE,297,MM)\n    turnroller()\n    #robot uses the optical sensor again to turn the roller\n\n    #resets the drivetrain heading to mitigate potential future errors\n    drivetrain.set_heading(0,DEGREES)\n\n\n    drivetrain.turn_to_heading(308,DEGREES)\n    #alligns the intake with the first disc\n\n    intake_motor_group.set_velocity(40,PERCENT)\n    intake_motor_group.spin(REVERSE)\n    #activates the intake for the three discs\n\n    drivetrain.drive_for(FORWARD,750,MM)\n    #drives into the first of the three discs, intakes it\n    drivetrain.turn_to_heading(315,DEGREES)\n    #realigns the drivetrain for the next to discs\n\n    drivetrain.drive_for(FORWARD,885,MM)\n    #drives to the third of the three discs. picks up the second disc along the way\n    wait(.15,SECONDS)\n    #wait gives the robot time to intake the discs\n    \n\n\n    drivetrain.turn_to_heading(45,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    #aims the shooter at the RED HIGH GOAL\n    shootdisc(3)\n    #fires the three discs\n\n    #manuevers the robot behind three discs for intaking\n    intake_motor_group.set_velocity(50,PERCENT)\n    drivetrain.turn_to_heading(180,DEGREES)\n    drivetrain.drive_for(FORWARD,800,MM)\n    drivetrain.turn_to_heading(225,DEGREES)\n    drivetrain.drive_for(FORWARD,300,MM)\n    wait(.2,SECONDS)\n    drivetrain.turn_to_heading(0,DEGREES)\n    drivetrain.drive_for(FORWARD,150,MM)\n    wait(.2,SECONDS)\n    drivetrain.drive_for(FORWARD,150,MM)\n    wait(.4,SECONDS)\n    drivetrain.drive_for(FORWARD,260,MM)\n    wait(.6,SECONDS)\n    #the robot occasionally misses discs here so the intake can be improved by rotating to where the disc should be every wait\n\n    drivetrain.turn_to_heading(55,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    shootdisc(3)\n\n\n    #drivetocord(300,300,True)\n    drivetrain.turn_to_heading(0,DEGREES)\n    drivetrain.drive_for(FORWARD,400,MM)\n    drivetrain.turn_to_heading(270,DEGREES)\n    intake_motor_group.set_velocity(30,PERCENT)\n    drivetrain.drive_for(FORWARD,200,MM)\n    wait(.3,SECONDS)\n    drivetrain.drive_for(FORWARD,130,MM)\n    wait(.3,SECONDS)\n    drivetrain.drive_for(FORWARD,220,MM)\n    wait(.5,SECONDS)\n    drivetrain.turn_to_heading(24,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    shootdisc(3)\n    \n\n\n\n    #fires the discs\n    drivetrain.drive_for(FORWARD,100,MM)\n    drivetocord(1500,220, True)\n    intake_motor_group.set_velocity(100,PERCENT)\n    drivetrain.turn_to_heading(347,DEGREES)\n\n    \"\"\"\n    #troubleshoot code\n    brain.screen.next_row()\n    brain.screen.next_row()\n    brain.screen.print(gps.x_position(MM))\n    brain.screen.next_row()\n    brain.screen.print(gps.y_position(MM))\n    \"\"\"\n\n    shootdisc(7)\n\n    #fires the blue side match loads\n    \n    drivetrain.turn_to_heading(45,DEGREES)\n    drivetrain.drive_for(FORWARD,550,MM)\n    intake_motor_group.set_velocity(55,PERCENT)\n    wait(1,SECONDS)\n    drivetrain.turn_to_heading(12,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    drivetrain.drive_for(FORWARD,100,MM,wait=False)\n    shootdisc(3)\n    drivetrain.turn_to_heading(90,DEGREES)\n    intake_motor_group.set_velocity(30,PERCENT)\n    drivetrain.drive_for(FORWARD,750,MM)\n    drivetrain.turn_to_heading(315,DEGREES)\n    drivetrain.drive_for(FORWARD,350,MM)\n    drivetrain.turn_to_heading(23,DEGREES)\n    intake_motor_group.set_velocity(90,PERCENT)\n    shootdisc(2)\n    intake_motor_group.spin(REVERSE)\n    intake_motor_group.set_velocity(50,PERCENT)\n    drivetrain.turn_to_heading(315,DEGREES)\n    drivetrain.drive_for(FORWARD,350,MM)\n    wait(1.2,SECONDS)\n    drivetrain.turn_to_heading(13,DEGREES)\n    intake_motor_group.set_velocity(94,PERCENT)\n    shootdisc(3)\n    drivetrain.turn_to_heading(315,DEGREES)\n    intake_motor_group.set_velocity(30,PERCENT)\n    drivetrain.drive_for(FORWARD,350,MM)\n    wait(.2,SECONDS)\n    drivetrain.drive_for(FORWARD,500,MM)\n    wait(.3,SECONDS)\n    drivetrain.turn_to_heading(359,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    shootdisc(2)\n    drivetrain.drive_for(REVERSE,150,MM)\n\n    #you can use the gps to driveuntil here\n    drivetrain.turn_to_heading(90,DEGREES)\n    drivetrain.drive_for(REVERSE,100,MM)\n    turnroller()\n    drivetrain.drive_for(FORWARD,500,MM)\n    drivetrain.turn_to_heading(180,DEGREES)\n    drivetrain.drive_for(REVERSE,280,MM)\n    turnroller()\n    intake_motor_group.set_velocity(30,PERCENT)\n    intake_motor_group.spin(REVERSE)\n    drivetrain.turn_to_heading(130,DEGREES)\n    drivetrain.drive_for(FORWARD,700,MM)\n    wait(.1,SECONDS)\n    drivetrain.turn_to_heading(135,DEGREES)\n    drivetrain.drive_for(FORWARD,350,MM)\n    wait(.1,SECONDS)\n    drivetrain.drive_for(FORWARD,520,MM)\n    wait(.3,SECONDS)\n    drivetrain.drive_for(FORWARD,500,MM)\n    drivetrain.turn_to_heading(218,DEGREES)\n    intake_motor_group.set_velocity(90,PERCENT)\n    shootdisc(3)\n    #drivetrain.drive_for(FORWARD,400,MM)\n\n\n    \n\n    \n\n\n    \n\n\n\n\n    \"\"\"\n    drivetrain.turn_to_heading(21,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    wait(2,SECONDS)\n    \n    drivetrain.turn_to_heading(0,DEGREES)\n    drivetrain.drive_for(FORWARD,550,MM)\n    wait(.5,SECONDS)\n    drivetrain.turn_to_heading(17,DEGREES)\n    wait(2,SECONDS)\n    drivetrain.turn_to_heading(0,DEGREES)\n    drivetrain.drive_for(FORWARD,600,MM)\n    intake_motor_group.set_velocity(95,PERCENT)\n    drivetrain.turn_to_heading(10,DEGREES)\n    wait(2,SECONDS)\n    drivetrain.turn_to_heading(0,DEGREES)\n    drivetrain.drive_for(REVERSE,990,MM)\n    drivetrain.turn_to_heading(90,DEGREES)\n    drivetrain.drive_for(REVERSE,575,MM)\n    drivetrain.turn_to_heading(349,DEGREES)\n    drivetrain.drive_for(FORWARD,90,MM)\n\n\"\"\"\n    \n\n\n    \n\n   \n\n\n\n    \"\"\"\n    continuemoving = True\n\n    #troublehsooting code\n    #print(top_line_tracker.reflectivity(PERCENT))\n\n    #console prints to brain screen, need to include brain screen when printing\n\n\n\n    #moves the robot into position to fire the discs into high goal\n    drivetrain.drive_for(FORWARD, 200, MM)\n    drivetrain.turn_to_heading(180,DEGREES)\n\n    #fires the discs into the high goal\n    intake_motor_group.spin(REVERSE)\n    wait(1,SECONDS)\n    #stopping the motor is necesary in order to prevent an error (loop)\n    intake_motor_group.stop()\n\n    #drives the robot into position to take in the match loads\n    drivetrain.drive_for(FORWARD,300,MM)\n    drivetrain.turn_to_heading(90,DEGREES)\n\n    #intakes the match loads\n    intake_motor_group.spin(REVERSE)\n    drivetrain.drive_for(FORWARD,230,MM)\n\n    #the wait function allows for the discs time to make their way up\n    wait(.85,SECONDS)\n    intake_motor_group.stop()\n\n    #positions the robot to prepare to fire the match loads\n    drivetrain.drive_for(REVERSE,120,MM)\n    #changing the position here allows for more discs to be able to be shot into the goal\n    drivetrain.turn_to_heading(180,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    #fires the match load\n    intake_motor_group.spin(REVERSE)\n    #wait function provides time for all discs to fly into goal\n    wait(2,SECONDS)\n    intake_motor_group.stop()\n        #repositions the bot after firing\n    drivetrain.turn_to_heading(90,DEGREES)\n    drivetrain.drive_for(FORWARD,120,MM)\n    drivetrain.drive_for(REVERSE,300,MM)\n    #bot repositioned, preparing to intake discs\n    wait(1,SECONDS)\n    intake_motor_group.set_velocity(100,PERCENT)\n    intake_motor_group.spin(REVERSE)\n    drivetrain.drive_for(FORWARD,300,MM)\n\n    wait(.85,SECONDS)\n    intake_motor_group.stop()\n    drivetrain.turn_to_heading(180,DEGREES)\n    intake_motor_group.set_velocity(100,PERCENT)\n    intake_motor_group.spin(REVERSE)\n    wait(2,SECONDS)\n    intake_motor_group.stop()\n    drivetrain.drive_for(FORWARD,1200,MM)\n    drivetrain.turn_to_heading(270,DEGREES)\n    drivetrain.drive_for(REVERSE,30,MM)\n    intake_motor_group.spin_for(FORWARD,.1,TURNS)\n    drivetrain.drive_for(FORWARD,480,MM)\n    drivetrain.turn_to_heading(0,DEGREES)\n    drivetrain.drive_for(REVERSE,280,MM)\n    intake_motor_group.spin_for(FORWARD,.1,TURNS)\n\n\n    # first part 60 points in 13 seconds, always misses the first disc. code CAN be made more efficient\n    # again this CAN BE MADE MORE EFFICIENT WITH WORK\n\n    \"\"\"\n    \"\"\"\n    drivetrain.drive_for(FORWARD, 1200, MM)\n    drivetrain.turn_to_heading(270,DEGREES)\n\n\n    drivetrain.set_drive_velocity(30,PERCENT)\n    intake_motor_group.set_velocity(30,PERCENT)\n\n\n    #part below is prone to not working, i got too stressed, getting rid of it\n    \"\"\"\n    \"\"\"\n    while continuemoving == True:\n      while top_line_tracker.reflectivity(PERCENT) == 84:\n         \n         intake_motor_group.stop()\n         continuemoving = False\n      else:\n         drivetrain.drive(FORWARD)\n         intake_motor_group.spin(REVERSE)\n         #troubleshooting code below\n         i = 0\n         while i<30:\n              brain.screen.print(top_line_tracker.reflectivity(PERCENT))\n              brain.screen.next_row()\n              i = i+ 1\n              if middle_line_tracker.reflectivity(PERCENT) == 84:\n                continuemoving = False\n\n\n\n\n    intake_motor_group.stop()\n    wait(300,SECONDS);\n    \"\"\"\n\n    \n\n    \n# VR threads — Do not delete\nvr_thread(main)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Virtual","virtualSkillsYear":"2023"}